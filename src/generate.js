const path = require('path');
const fs = require('fs-extra');
const ejs = require('ejs');
const minify = require('html-minifier').minify;
require('dotenv').config();

const jsonPath = path.join(__dirname, '..', '/site/', 'site.json');
const templatePath = path.join(__dirname, '..', '/site/', 'template.ejs');
const localDistFolder = path.join(__dirname, '..', '/dist/');
const viewPath = path.join(__dirname, '..', '/site/views/');

console.log(localDistFolder);

const minifyConfig = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true,
  minifyCSS: true
}

/**
 * Needed to set the <base> tag correctly to make links work correctly
 * @param {*} location Refers to target folder on FTP server
 * @param {*} devMode So we don't directly upload to localhost but to localhost/minpo
 * @returns 
 */
function setBaseUrl(location, devMode) {
  let url = "/";

  console.log("dev mode type:");
  console.log(typeof devMode);

  if (devMode === "true") {
    url = String(location);
  }
  console.log(url);
  return url;
}

/**
 * Starts the execution of generating process
 */
async function generate() {  
  const siteData = fs.readJsonSync(jsonPath);

  siteData.base_url = setBaseUrl(process.env.FTP_PUBLIC_FOLDER, process.env.LOCALHOST);

  const pages = siteData.pages;

  await confirmViewExistence(pages, viewPath);

  await fs.emptyDir(localDistFolder);

  await iteratePages(siteData, pages);
}

/**
 * Goes through all the pages in site.json including subpages.
 * If the page happens to be active, it will get rendered into an equivalent HTML file located in dist folder.
 * @param {*} siteData Content of site.json
 * @param {*} pages Same as siteData.pages
 */
async function iteratePages(siteData, pages) {
  for (const [key, page] of Object.entries(pages)) {
    if (page.active) {
        siteData.rendering = key;
        
        renderPage(key, siteData, localDistFolder);

        if (page.subpages && Array.isArray(page.subpages)) {
          const localDistSubfolder = localDistFolder + key + "/";
          console.log(localDistSubfolder);
          try {
            
            await fs.mkdirSync(localDistSubfolder);

            for (let i = 0; i < page.subpages.length; i++) {
              const subpage = page.subpages[i];
              if (subpage.active) {
                siteData.rendering = `${key}_subpages_${i}`;
                console.log(siteData.rendering);

                renderPage(i, siteData, `${localDistSubfolder}`);
              }
            }

          } catch (error) {
            console.log(`error while generating subpages: ` ,  error);
          }
        }

      }
  }

}

/**
 * Writes and minifies the page into an HTML file
 * @param {*} key Key-value for pages[key] in site.json
 * @param {*} data All the data declared in site.json
 * @param {*} localDistFolder Path to the local dist folder
 */
function renderPage(key, data, localDistFolder) {
  ejs.renderFile(templatePath, data, {}, function(error, html) {
    if (error) {
      console.error(`error rendering ${key} page: `, error);
      return;
    }
    
    html = minify(html, minifyConfig);
    fs.writeFileSync(`${localDistFolder}${key}.html`, html);
  });
}

// we choose to create the missing views (just empty html files)
// this way renderEngine doesn't have to throw an error when it tries to render missing view
async function confirmViewExistence(pages, viewPath) {
  //only make the active missing pages

  Object.keys(pages).forEach(function(key) {

    if (pages[key].active) {

      const view = path.join(__dirname, '..', '/site/views/', `${key}.ejs`);
      const viewExists = fs.existsSync(view);
  
      if (!viewExists) {
        fs.writeFileSync(`${viewPath}${key}.ejs`, `<!-- AUTOGENERATED VIEW FILE: ${key}.ejs -->`);
      }
  
      //subpages
      if (pages[key].subpages && Array.isArray(pages[key].subpages)) {
        //we just check if "key_subpage" view is defined if not, we create it
        const subpageView = path.join(__dirname, '..', '/site/views/', `${key}_subpage.ejs`);
        const subpageViewExists = fs.existsSync(subpageView);

        if (!subpageViewExists) {
          fs.writeFileSync(`${viewPath}${key}_subpage.ejs`, `<!-- AUTOGENERATED VIEW FILE: ${key}_subpage.ejs -->`);
        }

      }

    }

  });

}

module.exports = {generate, setBaseUrl, confirmViewExistence}